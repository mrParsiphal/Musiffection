# Generated by Django 4.2.5 on 2024-04-08 16:49

from django.db import migrations, models
import django.utils.timezone
import users.managers
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('login', models.CharField(max_length=15, unique=True, validators=[users.validators.validate_test], verbose_name='Логин')),
                ('name', models.CharField(default='Слушатель', max_length=15, verbose_name='Отображаемое имя')),
                ('email', models.EmailField(blank=True, max_length=20, null=True, unique=True, verbose_name='Электронная почта')),
                ('img', models.ImageField(blank=True, default='users/static/users/img/Stoned_Fox.jpg', null=True, upload_to='users/static/users/img', verbose_name='Изображение')),
                ('authorship', models.BooleanField(blank=True, default=False, verbose_name='Авторство')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Статус персонала')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Суперпользователь')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания аккаунта')),
                ('date_of_change', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата последнего редактирования')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
            managers=[
                ('objects', users.managers.UserManager()),
            ],
        ),
    ]
